#
# oh-my-zsh .zshrc file
# ---
# yes, the PATH is absolutely insane and needs to be handled better.
# this contains a lot of everything and could definitely be cleaned up a bit...
# osx helpers, malware research/analysis, bitcoin, networking, base16-shell, nvm support, etc..
#
# note: all of the OSX helper functions were taken from someone's zshrc file I found on Github 
#       I'm sorry I forgot the soure and can't give proper credit!
#       the disassembly functions are also from a long lost zshrc file found someone else created
##

## ZSH specific settings
export ZSH=$HOME/.oh-my-zsh

ZSH_THEME="mh"
ENABLE_CORRECTION="true"

### Aliases

## generally helpful stuff

# manage zsh and oh-my-zsh
alias zshrc="vim ~/.zshrc"
alias ohmyzsh="vim ~/.oh-my-zsh"

# make directory/directories
alias mkd="mkdir -p $@"

# open sublime text in current location using subl command
alias subl="/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl $@"

# overwrite tree command with hidden files and color enabled, ignore .git directory
alias tree="tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;"

# dont have archey get or show public IP addr
alias archey="archey --offline"

# easier git commands
alias gclone="git clone $1"
alias gcommit="git commit $@"
alias gpull="git pull $@"
alias gpush="git push $@"

# start HTTP server in current directory
alias pyserve="python -m SimpleHTTPServer"

# base64 encode/decode data
alias b64dec="python -m base64 -d $@"
alias b64enc="python -m base64 -e $@"

# url encode/code
alias urlenc='python -c "import sys, urllib as u; print u.quote_plus(sys.argv[1])"'
alias urldec='python -c "import sys, urllib as u; print u.unquote_plus(sys.argv[1])"'

# get external IP address
alias myip='dig +short myip.opendns.com @resolver1.opendns.com'

# bitcoin checks
alias btc_now="python2 -c 'import requests; r = requests.get(\"https://blockchain.info/tobtc?currency=USD&value=1\"); print \"USD:\t1.00\nBTC:\t%s\" % r.content.strip()'"
alias btc_info="curl -s http://btc.blockr.io/api/v1/coin/info | jq '.data.volume, .data.markets.coinbase, .data.last_block'"
alias btc_exch="curl -s http://btc.blockr.io/api/v1/exchangerate/current  | jq '.data[0].rates.BTC'"
alias btc_addr="curl -s http://btc.blockr.io/api/v1/address/info/$@ | jq '.'"

# wipe existing .zsh_history file
alias wipe_history='cat /dev/null > ~/.zsh_history'

# srm default for files or directories
alias srm='srm -m -v -f $@'

# useful aliases for hachoir
alias hsubfile="hachoir-subfile $@"
alias hmeta="hachoir-metadata $@"

# display strings with file offset
alias strings="strings -t x"

### Helper Functions & aliases

## malware & research stuff

# display API for dnstwist.com
dnstwist_api="curl https://dnstwister.report/api/ | jq '.'"

# get useful info from dig 
dig_all() {
    dig +nocmd "$1" any +multiline +noall +answer
}


# nicely display hashes and filename from file(s)
get_hashes()
{
    IFS=
    [ -n "$1" ] || return
    for i in $*; do
        md5=$(md5sum "$i" | awk '{print $1}')
        sha1=$(sha1sum "$i" | awk '{print $1}')
        sha256=$(sha256sum "$i" | awk '{print $1}')
        echo "File:   $i"
        echo "MD5:    $md5"
        echo "SHA1:   $sha1"
        echo "SHA256: $sha256"
        echo "\n"
    done
}


# rename list of files using their md5 hash as new name
md5_rename()
{
    IFS=
    local md5=
    [ -n "$1" ] || return
    for i in $*; do
        md5=$(md5sum "$i" | cut -d' ' -f)
        mv "$i" "$md5"
    done
}


# create zip file of malware with password "infected"
zipmal()
{
    [ -n "$1" ] || return
    local name=${1%\.*}.zip
    zip -- encrypt -P infected "$name" $@
    ls -lh "$name"
}


# wget a url with a Windows firefox user-agent
wget_ua()
{
    [ "$1" ] || return
    local ua='Mozilla/5.0 (Windows NT 6.1; WOW64; rv:28.0) Gecko/20100101 Firefox/28.0'
    wget -c --user-agent "$ua" "$1"
}


# wget a url through Tor with Windows firefox user-agent
tor_wget()
{
    [ "$1" ] || return
    local ua='Mozilla/5.0 (Windows NT 6.1; WOW64; rv:28.0) Gecko/20100101 Firefox/28.0'
    torsocks wget -c --user-agent "$ua" "$1" 
}


# get geolocation of IP address
geoip()
{
    wget -q --timeout=30 "http://xml.utrace.de/?query=$1" -O - | sed '4d' | sed "s/<[^>]*>//g; s/\t//g; /^$/d" | tr '\n' ',' ; echo "\n"
}


## disassembly helpers

matrix()
{
    echo -e "\e[32m";
    while :; do
        printf '%*c' $(($RANDOM % 30)) $(($RANDOM % 2));
    done
}


shr()
{
    [ $# -lt 2 ] && return 1
    echo $(($1>>$2))
}


shl()
{
    [ $# -lt 2 ] && return 1
    echo $(($1<<$2))
}


pow()
{
    [ $# -lt 2 ] && return 1
    echo $(($1**$2))
}


hexcalc()
{
    test $# -ne 3 && return 1
    echo -n 0x
    bh_dec2hex $((0x${1#0x} $2 0x${3#0x}))
}


xor()
{
   [ $# -lt 2 ] && return 1
    echo $(($1^$2))
}


charcalc()
{
    [ $# -ne 3 ] && return 1
    local char
    local chars
    local res
    local i
    case $2 in
        +|-)
            for i in $(echo "$1" | sed 's/./& /g'); do
                char=$(bh_asc2dec $i)
                res=$(($char $2 $3))
                    echo -n $(bh_dec2asc $res)
        done
        echo
        ;;
        '*')
            for (( i=0; i<$3; i++ )); do
                res="$res$1"
            done
            echo $res
        ;;
    esac

}

dec2hex() { printf "%x\n" "$1"; }
hex2dec() { echo $((0x${1#0x})); }
dec2bin() { echo "obase=2;$1" | bc; }
bin2dec() { echo $((2#$1)); }
b64d() { echo $1 | base64 -d; }
asmgrep() { gobjdump -d "$2" | grep --color -C 4 -E "$1"; }
dec2asc() { echo -e $(printf "\\\x%x" $1); }
asc2dec() { printf "%d\n" "'$1"; }


hex2bin()
{
    local bin
    for i in $*; do
        bin=$(echo "obase=2;ibase=16;$(echo $i | tr a-f A-F)" | bc)
        echo -n "$bin "
    done
    echo
}


sc2asm()
{
    local mode=32
    local in="$1"
    [ $1 = '-m' ] && mode=$2 in="$3"
    sc=$(echo "$in" | sed 's/\\x/ /g')
    echo "$sc" | udcli -$mode -x -noff -nohex | sed 's/^ //'
}


asm2sc()
{
    local obj=$(mktemp)
    local fmt=elf32
    local in="$1"
    [ $1 = "-f" ] && fmt=$2 in="$3"
    nasm -f $fmt -o $obj $in
    gobjdump -M intel -D $obj |
     tr -d \\t |
     sed -nr 's/^.*:(([0-9a-f]{2} )*).*$/\1/p' |
     tr -d \\n |
     sed 's/\(..\) /\\x\1/g'
    echo
    rm -f $obj
}


hex2str()
{
    [ $# -ne 1 ] && return 1
    local hex
    local str
    local i
    hex=$(echo $1 | sed 's/\(0x\|\\x\| \|{\|}\|,\)//g')
    # insert a space each two chars
    hex=$(echo $hex | sed 's/../& /g')
    # prefix with \x, needed by echo
    for i in $hex; do
        str="$str\\x$i"
    done
    echo -e $str
}


str2hex()
{
    [ $# -eq 0 ] && return 1
    case "$1" in
        "-s")
            echo -n "$2" | hexdump -ve '/1 "%02x"' | sed 's/^/0x/'
            echo
            ;;
        "-x")
            echo -n "$2" | hexdump -ve '/1 "%02x"' | sed 's/../\\x&/g'
            echo
            ;;
        "-0x")
            echo -n "$2" | hexdump -ve '/1 "0x%02x "' | sed 's/\(.*\) /\1/'
            echo
            ;;
        "-c")
            echo -n '{'
            echo -n "$2" | hexdump -ve '/1 "0x%02x, "' | sed 's/\(.*\), /\1/'
            echo '}'
            ;;
        *)
            echo -n "$1" | hexdump -ve '/1 "%02x "' | sed 's/\(.*\) /\1/'
            echo
            ;;
    esac
}


asciitable()
{
    echo -en \
    "Dec Hex    Dec Hex    Dec Hex  Dec Hex  Dec Hex  Dec Hex   Dec Hex   Dec Hex\n\
    0 00 NUL  16 10 DLE  32 20    48 30 0  64 40 @  80 50 P   96 60 \`  112 70 p\n\
    1 01 SOH  17 11 DC1  33 21 !  49 31 1  65 41 A  81 51 Q   97 61 a  113 71 q\n\
    2 02 STX  18 12 DC2  34 22 \"  50 32 2  66 42 B  82 52 R   98 62 b  114 72 r\n\
    3 03 ETX  19 13 DC3  35 23 #  51 33 3  67 43 C  83 53 S   99 63 c  115 73 s\n\
    4 04 EOT  20 14 DC4  36 24 $  52 34 4  68 44 D  84 54 T  100 64 d  116 74 t\n\
    5 05 ENQ  21 15 NAK  37 25 %  53 35 5  69 45 E  85 55 U  101 65 e  117 75 u\n\
    6 06 ACK  22 16 SYN  38 26 &  54 36 6  70 46 F  86 56 V  102 66 f  118 76 v\n\
    7 07 BEL  23 17 ETB  39 27 '  55 37 7  71 47 G  87 57 W  103 67 g  119 77 w\n\
    8 08 BS   24 18 CAN  40 28 (  56 38 8  72 48 H  88 58 X  104 68 h  120 78 x\n\
    9 09 HT   25 19 EM   41 29 )  57 39 9  73 49 I  89 59 Y  105 69 i  121 79 y\n\
   10 0A LF   26 1A SUB  42 2A *  58 3A :  74 4A J  90 5A Z  106 6A j  122 7A z\n\
   11 0B VT   27 1B ESC  43 2B +  59 3B ;  75 4B K  91 5B [  107 6B k  123 7B {\n\
   12 0C FF   28 1C FS   44 2C ,  60 3C <  76 4C L  92 5C \\  108 6C l  124 7C |\n\
   13 0D CR   29 1D GS   45 2D -  61 3D =  77 4D M  93 5D ]  109 6D m  125 7D }\n\
   14 0E SO   30 1E RS   46 2E .  62 3E >  78 4E N  94 5E ^  110 6E n  126 7E ~\n\
   15 0F SI   31 1F US   47 2F /  63 3F ?  79 4F O  95 5F _  111 6F o  127 7F DEL\n"
}

utf8table()
{
    echo -en \
    "Hex      Hex      Hex      Hex      Hex      Hex      Hex      Hex\n\
    c2 a0    c2 ac ¬  c2 b8 ¸  c3 84 Ä  c3 90 Ð  c3 9c Ü  c3 a8 è  c3 b4 ô\n\
    c2 a1 ¡  c2 ad ­  c2 b9 ¹  c3 85 Å  c3 91 Ñ  c3 9d Ý  c3 a9 é  c3 b5 õ\n\
    c2 a2 ¢  c2 ae ®  c2 ba º  c3 86 Æ  c3 92 Ò  c3 9e Þ  c3 aa ê  c3 b6 ö\n\
    c2 a3 £  c2 af ¯  c2 bb »  c3 87 Ç  c3 93 Ó  c3 9f ß  c3 ab ë  c3 b7 ÷\n\
    c2 a4 ¤  c2 b0 °  c2 bc ¼  c3 88 È  c3 94 Ô  c3 a0 à  c3 ac ì  c3 b8 ø\n\
    c2 a5 ¥  c2 b1 ±  c2 bd ½  c3 89 É  c3 95 Õ  c3 a1 á  c3 ad í  c3 b9 ù\n\
    c2 a6 ¦  c2 b2 ²  c2 be ¾  c3 8a Ê  c3 96 Ö  c3 a2 â  c3 ae î  c3 ba ú\n\
    c2 a7 §  c2 b3 ³  c2 bf ¿  c3 8b Ë  c3 97 ×  c3 a3 ã  c3 af ï  c3 bb û\n\
    c2 a8 ¨  c2 b4 ´  c3 80 À  c3 8c Ì  c3 98 Ø  c3 a4 ä  c3 b0 ð  c3 bc ü\n\
    c2 a9 ©  c2 b5 µ  c3 81 Á  c3 8d Í  c3 99 Ù  c3 a5 å  c3 b1 ñ  c3 bd ý\n\
    c2 aa ª  c2 b6 ¶  c3 82 Â  c3 8e Î  c3 9a Ú  c3 a6 æ  c3 b2 ò  c3 be þ\n\
    c2 ab «  c2 b7 ·  c3 83 Ã  c3 8f Ï  c3 9b Û  c3 a7 ç  c3 b3 ó  c3 bf ÿ\n"
}


## macOS helpers

# open current directory in Vim or specified files/directory
v() {
    if [ $# -eq 0 ]; then
        vim .;
    else
        vim "$@";
    fi;
}


# open current directory in Finder or specified location
o() {
    if [ $# -eq 0 ]; then
        open .;
    else
        open "$@";
    fi;
}

software_update() {
    echo "Installing software updates ..."
    softwareupdate -i -a > /dev/null 2>&1
    echo "[*] Software updated!"
}

# clean the trash of main disk and any attached volumes via rm with verbose mode
# note: this will miss ".name" files and folders
clean_trash() {
    echo "Emptying Trash from local disk and attached volumes ...\n"
    sudo rm -rfv /Volumes/*/.Trashes > /dev/null 2>&1
    sudo rm -rfv ~/.Trash  > /dev/null 2>&1
    echo "[*] Trash cleaning completed!"
}

# same as above but for system logs
clean_sys_logs() {
    echo "Emptying the system log files ...\n";
    sudo rm -rfv /private/var/log/*  > /dev/null 2>&1
    sudo rm -rfv /Library/Logs/DiagnosticReports/* > /dev/null 2>&1
    echo "[*] System log cleaning completed!"
}

# wipe all .log files in your Library
clean_logs_library(){
    echo "Clearing logs in ~/Library paths"
    find $HOME/Library/ -name "*.log" -type f -print0 | xargs -0 -J % -n 1 cp -v /dev/null "%" &>/dev/null
    echo "[*] Logs cleaning completed!"
}

# clean up all of homebrews crap it leaves behind
clean_brew() {
    echo "Cleaning up Homebrew...\n";
    brew cleanup --force -s > /dev/null 2>&1
    brew cask cleanup > /dev/null 2>&1
    rm -rfv /Library/Caches/Homebrew/* > /dev/null 2>&1
    brew tap --repair > /dev/null 2>&1
    echo "[*] Brew cleanup completed!"
}


# force disk cache to be flushed
purge_memory(){
    echo "Purging memory ...\n";
    sudo purge > /dev/null 2>&1
    echo "[*] Memory purge completed!"
}

# erase freespace on your root disk
secure_erase_freespace() {
    echo "Securely erasing free space... This will take awhile, grab a coffee."
    diskutil secureErase freespace 0 "$( df -h / | tail -n 1 | awk '{print $1}')" > /dev/null 2>&1
}

# display useful info from domain certificates
cert_names() {
    if [ -z "${1}" ]; then
        echo "[error] No domain specified.";
        return 1;
    fi;

    local domain="${1}";
    echo "Testing ${domain}…";
    echo ""; # newline

    local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
        | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText=$(echo "${tmp}" \
            | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
            no_serial, no_sigdump, no_signame, no_validity, no_version");
        echo "Common Name:";
        echo "";
        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
        echo "";
        echo "Subject Alternative Name(s):";
        echo "";
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
            | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
        return 0;
    else
        echo "[error] Certificate not found.";
        return 1;
    fi;
}

# clear out OSX's quarantine events
clean_quarantine(){
    "Clearing Quarantined Files from SQLiteDB ..."
    sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 'delete from LSQuarantineEvent' &>/dev/null
    echo "[*] Quarantine clearing completed!"
}

# the names are pretty obvious for a lot of these funcs so im going to stop adding these comments...
disk_ls() {
    if [ -z "${1}" ]; then
        diskutil list
    else
        diskutil list "${1}"
    fi
}

disk_info() {
    [ -z "${1}" ] && help && exit 1
    diskutil info "${1}"
}

list_filesystems() {
    diskutil listFilesystems
}


# display total size of folder contents
folder_size() {
    dir="${@:-.}"
    echo "Folder size:"
    du -sh "${dir}"
}


# show battery status
battery_status() {
    pmset -g batt
}


# view systems local name, network hostname, netbios name, etc
show_hostname() {
    scutil --get ComputerName | awk '{print "ComputerName: ", $1}'
    scutil --get HostName | awk '{print "HostName: ", $1}'
    scutil --get LocalHostName | awk '{print "LocalHostName: ", $1}'
    defaults read /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName | awk '{print "NetBIOSName: " $1}'
}


# change local, network, netbios hostname all at once to first argument
set_hostname() {
    echo "Changing hostname to: $1"
    sudo scutil --set ComputerName "$1" && \
        sudo scutil --set HostName "$1" && \
        sudo scutil --set LocalHostName "$1" && \
        sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "$1"
}


# wipe cache, history and temp files, etc.
# edit the file names as desired on your own system..
clean_sys() {
  echo "Cleaning local user files securely ..."
  cat /dev/null > ~/.vim/dirs/viminfo
  cat /dev/null > ~/.zsh_history
  cat /dev/null > ~/.bash_history
  cat /dev/null > ~/.sh_history
  cat /dev/null > ~/.lesshst
  cat /dev/null > ~/.pythonhist

  echo "Cleaning Trash securely ..."
  srm -rfvzm ~/.Trash/*
  echo "Cleaning Safari history securely ..."
  srm -rfvzm ~/Library/Caches/Metadata/Safari/History/*
  echo "[*] Done!"
}


# flush DNS settings the easy way!
flush_dns() {
    VERSION=$(sw_vers -productVersion)
    echo "Flushing dns..."
    if echo $VERSION | grep -E '^10\.10(\.[0-3])?$' >/dev/null 2>&1; then
        sudo discoveryutil mdnsflushcache
    elif echo $VERSION | grep -E '^10\.6(\.[0-8])?$' >/dev/null 2>&1; then
        sudo dscacheutil -flushcache
    else
        sudo killall -HUP mDNSResponder
    fi
}


# Start screensaver
screensaver() {
    open /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app
}


lock_mac() {
    echo "Locking system ..."
    sleep 3
    /System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend
}


mac_sleep() {
    echo "Sleeping system ..."
    sleep 3
    pmset sleepnow
}

# kill all open applications except the items in the ignore variable
kill_open() {
    ignore="grep\|iTerm\|Finder\|1Password\|Little\ Snitch"
    ps aux | grep /Applications | grep -v $ignore | sed "s/\ *\ /\ /g" | cut -d ' ' -f 2 | xargs -I X kill -9 X
}

# The next batch of "service_" functions try to mimic Linux "service" or "systemctl" command style for macOS services
LAUNCHCTLPATHS=( \
    $HOME/Library/LaunchAgents \
    /Library/LaunchAgents \
    /Library/LaunchDaemons \
    /System/Library/LaunchAgents \
    /System/Library/LaunchDaemons \
    )

find_service(){
    [ -z "$1" ] && >&2 echo "Please enter servicename" && exit 1

    for p in "${LAUNCHCTLPATHS[@]}"; do
        if [ -f "${p}/${1}" ]; then
            echo "${p}/${1}"
        elif [ -f "${p}/${1}.plist" ]; then
            echo "${p}/${1}.plist"
        fi
    done
}

service_list(){
    if [ -z "$@" ]; then
        sudo launchctl list
    else
        sudo launchctl list $@
    fi
}


service_info(){
    [ -z "${1}" ] && >&2 echo "Please enter servicename" && exit 1

    SERVICE_PATH=$(find_service $1)
    defaults read ${SERVICE_PATH}
}

service_load(){
    [ -z "${1}" ] && >&2 echo "Please enter servicename" && exit 1

    SERVICE_PATH=$(find_service $1)
    echo "Loading < ${SERVICE_PATH} >"
    sudo launchctl load -w ${SERVICE_PATH} 2>/dev/null
}

service_unload(){
    [ -z "${1}" ] && >&2 echo "Please enter servicename" && exit 1

    SERVICE_PATH=$(find_service $1)
    echo "Unloading < ${SERVICE_PATH} >"
    sudo launchctl unload -w ${SERVICE_PATH} 2>/dev/null
}

service_start(){
    [ -z "${1}" ] && >&2 echo "Please enter servicename" && exit 1

    echo "Starting < ${1} >"
    sudo launchctl start "${1}"
}

service_stop(){
    [ -z "${1}" ] && >&2 echo "Please enter servicename" && exit 1

    echo "Stoping < ${1} >"
    sudo launchctl stop "${1}"
}


##Trash manual delete
trash_clean() {
    [ ! -e "$HOME/.Trash"  ] && echo "Trash not found" && exit 1
    sudo chflags -R nouchg $HOME/.Trash/* 2>/dev/null
    sudo srm -rfzvm $HOME/.Trash/*
}


trash_size() {
    echo "Trash size: "
    du -sh ~/.Trash/
}

# Control volume settings
mute(){
    osascript -e "set volume output muted true"
    echo "Vol, Mute: true "
}


unmute(){
    osascript -e "set volume output muted false"
    echo "Vol, Mute: false"

}


is_mute(){
    VALUE=$(osascript -e 'output muted of (get volume settings)')
    echo "Volume is muted: ${VALUE}"
}


set_vol(){
    osascript -e "set volume output volume $1"
    echo "Volume set to: $1"
}


get_vol(){
    VALUE=$(osascript -e "output volume of (get volume settings)")
    echo "Volume level: $VALUE"
}


# clean Python pyc and cache files from cwd
pyclean () {
    find . -type f -name "*.py[co]" -delete
    find . -type d -name "__pycache__" -delete
}


local_ip() {
    my_ip=$(ipconfig getaddr en0)
    echo "Local IP: ${my_ip}\n"
}


## base16-shell is beautiful
export BASE16_SHELL=$HOME/.config/base16-shell/
[ -n "$PS1" ] && [ -s $BASE16_SHELL/profile_helper.sh ] && eval "$($BASE16_SHELL/profile_helper.sh)"
export BASE16_THEME=$HOME/.config/base16-shell/scripts/base16_ocean.sh


## nvm loading and bash completion
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"


## All the exports ever

# sorry homebrew
export HOMEBREW_NO_AUTO_UPDATE=1
export HOMEBREW_NO_ANALYTICS=1
export HOMEBREW_NO_GITHUB_API=1
export HOMEBREW_NO_INSECURE_REDIRECT=1

# Misc
export EDITOR='vim'
export ARCHFLAGS="-arch x86_64"
export SSH_KEY_PATH="~/.ssh/rsa_id"
export LANG=en_US.UTF-8
export TARGET_LANG=en
export BYOBU_PREFIX=/usr/local
export GIT_EDITOR="subl --wait --new-window"

# syntax highlighting
export ZSH_HIGHLIGHT_HIGHLIGHTERS_DIR=/usr/local/share/zsh-syntax-highlighting/highlighters
source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

PYTHON2_PATH=$HOME/Library/Python/2.7/bin
PYTHON3_PATH=$HOME/Library/Python/3.6/bin

# proper paths for all types of madness from custom and brew installed packages and libraries
export MANPATH="/usr/local/man:/usr/local/opt/coreutils/libexec/gnuman:/usr/local/opt/findutils/libexec/gnuman:/usr/local/opt/gnu-sed/libexec/gnuman:$MANPATH"
export PATH=/bin:/sbin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/usr/local/opt/coreutils/libexec/gnubin:/usr/local/opt/findutils/libexec/gnubin:/usr/local/opt/gnu-sed/libexec/gnubin:/usr/local/opt/gettext/bin:/usr/local/opt/libpcap/bin:/usr/local/opt/libxml2/bin:/usr/local/opt/libxslt/bin:$PYTHON2_PATH:$PYTHON3_PATH:$PATH

# completions
fpath=(/usr/local/share/zsh-completions $fpath)

# plugins and plugins
plugins=(git pip aws history gnu-utils colored-man-pages iterm2 json osx celery)

# annnnnd we're done
source $ZSH/oh-my-zsh.sh
